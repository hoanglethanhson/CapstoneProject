## Get docker-compose image from https://hub.docker.com/r/tmaier/docker-compose
services:
  - docker:dind

stages:
  - test
  - image_build
  - deploy

variables:
  # use the overlay storage driver
  # https://docs.gitlab.com/ce/ci/docker/using_docker_build.html#using-the-overlayfs-driver
  DOCKER_DRIVER: overlay
  SERVER_CACHE_IMAGE: registry.gitlab.com/hovi-team-development/hovi-backend/server
  DATABASE_CACHE_IMAGE: registry.gitlab.com/hovi-team-development/hovi-backend/database

#test:
#  stage: test
#  image: thuongnn1997/docker:stable
#  only:
#    - master
#    - production
#  before_script:
#    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#  script:
#    - cd ./gitlab-ci
#    - docker pull $DATABASE_CACHE_IMAGE:latest || true
#    - docker pull $SERVER_CACHE_IMAGE:latest || true
#    - docker-compose up --build --abort-on-container-exit
#  after_script:
#    - docker push $DATABASE_CACHE_IMAGE:latest
#    - docker push $SERVER_CACHE_IMAGE:latest
#  artifacts:
#    name: "test-reports-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME"
#    when: always
#    paths:
#      - ./hovi-server/coverage
#
#image_build:
#  stage: image_build
#  image: docker:stable
#  only:
#    - production
#  before_script:
#    - docker info
#    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#  script:
#    - docker pull $SERVER_CACHE_IMAGE:latest || true
#    - docker build --pull --cache-from $SERVER_CACHE_IMAGE:latest -t hovi-server ./hovi-server
#    - docker tag hovi-server $SERVER_CACHE_IMAGE:prod
#    - docker push $SERVER_CACHE_IMAGE:prod

deploy_live:
  image: dwdraju/gke-kubectl-docker
  stage: deploy
  only:
    - production
  when: manual
  script:
    - echo "$GCLOUD_SERVICE_KEY" > key.json
    - gcloud auth activate-service-account --key-file=key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud container clusters get-credentials $CLUSTER_NAME --zone $CLUSTER_ZONE --project $GCP_PROJECT_ID
    - kubectl version
    - kubectl apply -f ./k8s/ingress
    - kubectl apply -f ./k8s/mysql
    - |
      if kubectl apply -f ./k8s/server/deployment.yaml | grep -q unchanged; then
          echo "=> Patching server deployment to force image update."
          kubectl patch deployment ./k8s/server/deployment.yaml -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"build\":\"$CI_COMMIT_SHORT_SHA\"}}}}}}"
      else
          echo "=> Server Deployment apply has changed the object, no need to force image update."
      fi
